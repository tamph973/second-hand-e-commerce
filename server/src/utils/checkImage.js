import * as tf from '@tensorflow/tfjs-node';
import * as nsfwjs from 'nsfwjs';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c hi·ªán t·∫°i
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh
const imagePath = path.join(__dirname, './bikini-multi-alcas-por-do-sol.jpg');

try {
	// ƒê·ªçc file ·∫£nh
	const image = fs.readFileSync(imagePath);

	// Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh tensor
	const imageTensor = tf.node.decodeImage(image, 3);

	// T·∫£i m√¥ h√¨nh NSFWJS
	const model = await nsfwjs.load();

	// Ph√¢n lo·∫°i ·∫£nh
	const predictions = await model.classify(imageTensor);

	// Gi·∫£i ph√≥ng tensor ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ
	imageTensor.dispose();

	// In k·∫øt qu·∫£
	console.log('\nüìä K·∫øt qu·∫£ ph√¢n t√≠ch:');
	console.log('------------------------');

	// Ki·ªÉm tra c√°c lo·∫°i n·ªôi dung kh√¥ng ph√π h·ª£p
	const nsfwCategories = ['Porn', 'Hentai', 'Sexy'];
	const nsfwResults = predictions.filter(
		(p) => nsfwCategories.includes(p.className) && p.probability > 0.7,
	);

	if (nsfwResults.length > 0) {
		console.log('‚ùå ·∫¢nh kh√¥ng ph√π h·ª£p!');
		console.log('\nüîç Chi ti·∫øt ph√°t hi·ªán:');
		nsfwResults.forEach((cat) => {
			console.log(
				`- ${cat.className}: ${(cat.probability * 100).toFixed(2)}%`,
			);
		});
	} else {
		console.log('‚úÖ ·∫¢nh h·ª£p l·ªá');
	}

	console.log('\nüìà Ph√¢n t√≠ch chi ti·∫øt:');
	predictions.forEach((p) => {
		console.log(`- ${p.className}: ${(p.probability * 100).toFixed(2)}%`);
	});
} catch (error) {
	if (error.code === 'ENOENT') {
		console.error(
			'‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file ·∫£nh t·∫°i ƒë∆∞·ªùng d·∫´n:',
			imagePath,
		);
	} else {
		console.error('‚ùå L·ªói:', error.message);
	}
}
